// Generated by CoffeeScript 1.6.3
(function() {
  var Cube, sign,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Cube = (function() {
    Cube.prototype.action = false;

    Cube.prototype.top = 0;

    Cube.prototype.side = 0;

    Cube.prototype.x = 0;

    Cube.prototype.y = 0;

    Cube.prototype.action = null;

    Cube.prototype.interacted = false;

    function Cube($wrap, size, options) {
      var key, value;
      this.$wrap = $wrap;
      this.size = size != null ? size : 200;
      this.handleTouch = __bind(this.handleTouch, this);
      this.settings = {
        horizontal: true,
        vertical: true
      };
      for (key in options) {
        value = options[key];
        this.settings[key] = value;
      }
      this.$cube = this.$wrap.find(".cube");
      this.cube = this.$cube[0];
      this.sides = this.$cube.children();
      this.$wrap.css({
        width: size,
        height: size
      });
      this.treshold = this.size / 4;
      this.transformProp = this.transformSupport(["transform", "WebkitTransform", "MozTransform", "OTransform", "msTransform"]);
      this.transitionDurationProp = this.transformSupport(["transitionDuration", "WebkitTransitionDuration", "MozTransitionDuration", "OTransitionDuration", "msTransitionDuration"]);
      this.is3D = this.transformProp !== null;
      this.reset();
      this.bind();
    }

    Cube.prototype.translatecube = function() {
      var style;
      style = ["", "translateZ(-" + (this.size / 2) + "px) rotateY(0deg) rotateX(0deg)"];
      return this.$cube[0].style[this.transformProp] = style[this.is3D * 1];
    };

    Cube.prototype.translatefaces = function() {
      var className, faces, style, transform, _results;
      faces = this.$cube.children();
      transform = {
        ".top": "rotateX(90deg) translateZ(" + (this.size / 2) + "px)",
        ".front": "translateZ(" + (this.size / 2) + "px)",
        ".right": "rotateY(90deg) translateZ(" + (this.size / 2) + "px)",
        ".back": "rotateY(180deg) translateZ(" + (this.size / 2) + "px)",
        ".left": "rotateY(-90deg) translateZ(" + (this.size / 2) + "px)",
        ".bottom": "rotateX(-90deg) rotate(180deg) translateZ(" + (this.size / 2) + "px)"
      };
      _results = [];
      for (className in transform) {
        style = transform[className];
        if (!this.is3D) {
          style = "";
        }
        _results.push(faces.filter(className)[0].style[this.transformProp] = style);
      }
      return _results;
    };

    Cube.prototype.translate = function(coords) {
      var x, y;
      x = coords.x, y = coords.y;
      if (typeof x === "number") {
        this.x = x;
      }
      if (typeof y === "number") {
        this.y = y;
      }
      if (this.is3D) {
        return this.cube.style[this.transformProp] = "translateZ(-" + (this.size / 2) + "px) rotateX(" + this.y + "deg) rotateY(" + this.x + "deg)";
      } else {
        return this.cube.style[this.transformProp] = "translateX(" + x + "px)";
      }
    };

    Cube.prototype.repositionTop = function(spin) {
      this.sides.filter('.top')[0].style[this.transformProp] = "rotateX(90deg) translateZ(" + (this.size / 2) + "px) rotateZ(" + spin + "deg)";
      return this.sides.filter('.bottom')[0].style[this.transformProp] = "rotateX(-90deg) translateZ(" + (this.size / 2) + "px) rotateZ(" + (spin * -1) + "deg)";
    };

    Cube.prototype.reset = function() {
      var sizes, xpos, ypos;
      sizes = [this.sides.length * this.size, "100%"];
      xpos = this.is3D ? this.side * 90 : this.side * this.size;
      ypos = this.is3D ? this.top * 90 : false;
      this.translate({
        x: xpos,
        y: ypos
      });
      this.translatefaces();
      this.translatecube();
      this.$wrap.toggleClass("is-flat", !this.is3D);
      this.$cube.css("width", sizes[this.is3D * 1]);
      this.sides.css("width", this.size);
      if (this.is3D) {
        return this.repositionTop(0);
      }
    };

    Cube.prototype.bind = function() {
      var _this = this;
      $(document).on("keydown", function(evt) {
        var move;
        move = null;
        switch (evt.keyCode) {
          case 37:
            move = {
              x: _this.x + 90
            };
            break;
          case 38:
            move = {
              y: _this.y + 90
            };
            break;
          case 39:
            move = {
              x: _this.x - 90
            };
            break;
          case 40:
            move = {
              y: _this.y - 90
            };
            break;
          case 27:
            _this.reset();
            break;
          default:
            return;
        }
        _this.translate(move);
        if (move.x !== void 0) {
          return _this.repositionTop(_this.x);
        }
      });
      Hammer(this.$cube.parent()[0]).on('touch mouseover tap click', function(ev) {
        return _this.handleTouch(ev);
      });
      return Hammer($("body")[0], {
        drag_min_distance: 0,
        drag_lock_to_axis: true
      }).on('drag dragstart dragend', function(ev) {
        if (_this.activated) {
          return _this.handleTouch(ev);
        }
      });
    };

    Cube.prototype.transformSupport = function(props) {
      var el, prop, _i, _len;
      el = document.createElement("div");
      prop = null;
      for (_i = 0, _len = props.length; _i < _len; _i++) {
        prop = props[_i];
        if (typeof el.style[prop] !== "undefined") {
          return prop;
        }
      }
    };

    Cube.prototype.mode = function(which) {
      this.is3D = which === "3d";
      return this.reset();
    };

    Cube.prototype.ease = function(prop) {
      prop = prop / 4;
      return prop = Math.min(this.size, Math.abs(prop)) * sign(prop);
    };

    Cube.prototype.drag = function(ev) {
      var change, inertia, sideways, which, x, y, _ref;
      sideways = (_ref = ev.gesture.direction) === "left" || _ref === "right";
      if (this.settings.vertical === false && !sideways) {
        return;
      }
      if (this.settings.horizontal === false && sideways) {
        return;
      }
      if (this.action == null) {
        this.action = sideways ? "leftright" : "updown";
      }
      which = this.action === "leftright" ? "deltaX" : "deltaY";
      change = sign(ev.gesture[which]);
      if (change === 0) {
        return;
      }
      if (this.action === "leftright" && this.top === 0) {
        inertia = this.is3D ? 90 : this.size;
        x = (this.side * inertia) + (this.ease(ev.gesture.deltaX));
        this.translate({
          x: x
        });
      } else if (this.action === "updown" && this.is3D) {
        y = this.ease(ev.gesture.deltaY);
        this.translate({
          y: (this.top * 90) - y
        });
      }
      return ev.gesture.preventDefault();
    };

    Cube.prototype.release = function(from, ev) {
      var change, delta, inertia, sideways, which, _ref,
        _this = this;
      if (this.action === "leftright" && this.top !== 0) {
        return;
      }
      if (!(from || from === "releasing")) {
        return;
      }
      sideways = from === "leftright";
      this.action = "releasing";
      this.$cube.removeClass("dragging");
      setTimeout(function() {
        return _this.action = null;
      }, 100);
      which = sideways ? "deltaX" : "deltaY";
      delta = (_ref = ev.gesture) != null ? _ref[which] : void 0;
      if (Math.abs(delta) > this.treshold) {
        change = sign(delta);
      }
      if (sideways) {
        if (this.is3D) {
          inertia = 90;
        } else {
          inertia = this.size;
          if ((this.side === 0 && change === 1) || (-this.side === this.sides.length - 1 && change === -1)) {
            change = 0;
          }
        }
        if (change) {
          this.side += change;
        }
        this.translate({
          x: this.side * inertia
        });
        if (this.is3D) {
          return this.repositionTop(this.side * 90);
        }
      } else if (this.is3D) {
        if (change) {
          this.top -= change;
        }
        if (this.top > 1) {
          this.top = 1;
        }
        if (this.top < -1) {
          this.top = -1;
        }
        return this.translate({
          y: this.top * 90
        });
      }
    };

    Cube.prototype.interacted = function() {
      if (this.hasInteracted) {
        return;
      }
      this.hasInteracted = true;
      return this.$wrap.toggleClass("has-interacted", true);
    };

    Cube.prototype.handleTouch = function(ev) {
      var link;
      switch (ev.type) {
        case 'touch':
          this.dragged = false;
          this.activated = true;
          this.interacted();
          return this.$cube.addClass("dragging");
        case 'click':
          if (this.dragged) {
            return;
          }
          link = $(ev.target).data("link");
          if (link) {
            return window.open(link);
          }
          break;
        case "dragend":
          if (!(this.action || this.action === "releasing" || !ev.gesture)) {
            return;
          }
          this.activated = false;
          this.release(this.action, ev);
          return this.action = null;
        case "drag":
          this.dragged = true;
          if (this.action === "releasing" || ev.gesture === void 0) {
            return;
          }
          return this.drag(ev);
      }
    };

    return Cube;

  })();

  sign = function(x) {
    if (x) {
      if (x < 0) {
        return -1;
      } else {
        return 1;
      }
    } else {
      return 0;
    }
  };

  window.Cube = Cube;

}).call(this);
